@page "/students"
@inject IJSRuntime JSRunrime
@inject IStringLocalizer<Resource> localizer
@inject InteropSettings _interopSettings
@using Blazored.FluentValidation

<h1>student</h1>
<div id="studentValidation" class="col-10 alert alert-info ">
    <span></span>
</div>

<div class="col-12">
    <EditForm Model="@student" OnValidSubmit="@SaveStudent">
        @*<FluentValidator />*@
        <FluentValidationValidator />
        <ValidationSummary />

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">@localizer["student_id"] :</label>
            <label class="col-2 font-weight-bold">@*student.Id :*@</label>
            <InputText class="form-control col-3" @bind-Value="student.Id" placeholder="student ID" />
            &nbsp; <ValidationMessage For="@(() => student.Id)" />

        </div>
        <br />
        <!--<div class="col-12 row">-->
        @*<label class="col-2 font-weight-bold">@localizer["student.Id"] :</label>*@
        <!--<label class="col-2 font-weight-bold">student.RowId :</label>
            <InputNumber class="form-control col-3" @bind-Value="student.RowId" placeholder="student ID" />
            &nbsp; <ValidationMessage For="@(() => student.RowId)" />

        </div>-->
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">ٍٍ@localizer["student_name"] :</label>
            <label class="col-2 font-weight-bold">@*ٍٍstudent.Name :*@</label>
            <InputText class="form-control col-3" @bind-Value="student.Name" placeholder="Student Name" />
            &nbsp; <ValidationMessage For="@(() => student.Name)" />

        </div>
        <br />
        <div class="col-12 row">
            @*<label class="col-2 font-weight-bold">ٍٍ@localizer["student.Name"] :</label>*@
            <label class="col-2 font-weight-bold">ٍٍstudent.NameSecondLanguage :</label>
            <InputText class="form-control col-3" @bind-Value="student.NameSecondLanguage" placeholder="Student Name" />
            &nbsp; <ValidationMessage For="@(() => student.NameSecondLanguage)" />

        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Age  :</label>
            <InputNumber class="form-control col-3" @bind-Value="student.Age" placeholder="Age" />
            &nbsp; <ValidationMessage For="@(() => student.Age)" />

        </div>
        <br />

        <div class="col-12 row">
            <label class="col-2 font-weight-bold"> Email :</label>
            <InputText class="form-control col-3" @bind-Value="student.Email" placeholder="Email" />
            &nbsp;<ValidationMessage For="@(() => student.Email)" />

        </div>
        <br />

        <div class="col-12 row">
            <label class="col-2 font-weight-bold"> Mobile :</label>
            <InputText class="form-control col-3" @bind-Value="student.Mobile" placeholder=" Mobile" />
            &nbsp;<ValidationMessage For="@(() => student.Mobile)" />

        </div>
        <br />

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Joining Date :</label>
            <InputDate class="form-control col-3" @bind-Value="student.JoiningDate" placeholder="Joining Date" />
            &nbsp;<ValidationMessage For="@(() => student.JoiningDate)" />

        </div>
        <br />

        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Submit" />
            <span>&nbsp;</span>
            <input type="reset" class="form-control col-1 btn btn-primary" value="Clear" />
        </div>
        <br />
    </EditForm>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th>student ID</th>
            <th>student Name</th>
            <th>Age</th>
            <th>Email</th>
            <th>Mobile</th>
            <th>Joining Date</th>
        </tr>
    </thead>
    <tbody>
        @if (students != null && students.Count > 0)
            @foreach (Student item in students)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Age</td>
                    <td>@item.Email</td>
                    <td>@item.Mobile</td>
                    <td>@item.JoiningDate</td>
                </tr>
            }
    </tbody>
</table>


@code
{
    private Student student = new Student();

    List<Student> students = new List<Student>();

    protected override void OnInitialized() => _interopSettings.OnCultureChange += InvokeCultureStateHasChanged();

    public Action InvokeCultureStateHasChanged() => (() => InvokeAsync(() => StateHasChanged()));

    public void Dispose() => _interopSettings.OnCultureChange -= InvokeCultureStateHasChanged();

    private void SaveStudent()
    {
        students.Add(student);
        student = new Student();

        JSRunrime.InvokeVoidAsync("saveMessage");
    }
}